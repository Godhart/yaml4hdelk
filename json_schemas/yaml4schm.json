{
    "$schema": "https://json-schema.org/draft-07/schema",
    "$ref": "#/$defs/unitSpec",
    "$id": "./yaml4schm.json",
    "$comments": "VSCode: apply for '*.schm.yaml' using this guide https://dev.to/brpaz/how-to-create-your-own-auto-completion-for-json-and-yaml-files-on-vs-code-with-the-help-of-json-schema-k1i",
    "title": "Unit",
    "description": "Schematics description in YAML format for unit",

    "$defs": {
        "unitSpec": {
            "title": "Unit Specification",
            "description": "Contains unit specification:\n\n  - declaration of IO,\n  - declaration of unit's generics,\n  - unit's attributes defaults,\n  - description of unit's schematic",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "source":   {
                    "title": "Source",
                    "type": "string",
                    "pattern": "^((/|\\$|((\\.\\.?/)(\\.\\./)*)|(https?://\\w([.-]?\\w)*((/(\\w(-?\\w)*/)*(\\w(-?\\w)*))?@/)?)|(git://\\w([.-]?\\w)*/(\\w(-?\\w)*/)*(\\w(-?\\w)*@/)(\\w(-?\\w)*/)*(\\w(-?\\w)*\\^)(\\$|/)))?([\\w.-]*[\\w-]/)*([\\w.-]*[\\w-])(#(/\\w([\\w.-]*\\w)*)+)?)|(#(/\\w([\\w.-]*\\w)*)+)$",
                    "description": "Path to external file with unit specification.\nPath may be specified as:\n\n  - locally referenced path,\n  - absolute path (in respect to common base path),\n  - http reference,\n  - git reference (see docs for details).\n\nA part of file can be used if sepcified so (extra path after # (hash) sign, similar to JSON-Schema).\nLoaded data should be a dictionary.\nItems from loaded data would override items that were declared ABOVE (items that are not in loaded data would be kept).\nLoaded data can be altered then with declarations BELOW."
                },
                "merge":    {
                    "title": "Merge",
                    "type":    "array",
                    "items": {"$ref": "#/$defs/unitSpec"},
                    "description": "List with unit specifications, that would be merged with items, declaraed ABOVE:\n  - dictionaries are mixed recursively (existings items are replaced),\n  - lists are joined,\n  - scalars simply replaced,\n  - items with null/None value would delete existing items.\n\nSince specification allows 'source' - data for merge may be loaded from external file."
                },
                "virtual":  {
                    "title": "Virutal",
                    "const": "TODO: boolean after it's implemented",
                    "description": "Specification is used only for referencing from other places"
                },
                "units":    {"$ref":    "#/$defs/unitsDict"},
                "generics": {"const":   "TODO"},
                "io":       {"$ref":    "#/$defs/ioDict"},
                "display":  {"const":   "TODO"},
                "attributes": {"$ref":  "#/$defs/unitAttr"},
                "nets":     {"type":    "array", "items": {
                    "oneOf": [
                        {   "$ref":    "#/$defs/netSpec"},
                        {   "type":    "array",
                            "prefixItems": [
                                { "const":  "TODO:src" },
                                { "const":  "TODO:dst" }
                            ],
                            "additionalItems": {
                                "type": "string",
                                "pattern": "^((-regex)|(name:TODO)|(text:TODO)|(bus:TODO)|(color:TODO)|(highlight:TODO)|(reverse:TODO)|(hide:TODO)|(show:TODO)|(class:TODO)|(style:TODO)|(layers:TODO))$"
                            }
                        }
                    ]
                }},
                "operators":{"const":   "TODO"}
            }
        },
        "unitsDict": {
            "title": "Nested units",
            "description": "Dictionary with specifications for nested units instances.\nKey is unit's instance reference name, that would be used in nets, operators and other references.\nValue should be an unit's instance specification.",
            "type": "object",
            "additionalProperties": false,
            "patternProperties": {
                "^\\w+$":   { "$ref": "#/$defs/unitInst" }
            }
        },
        "unitInst": {
            "title": "Unit's Instance Specification",
            "description": "Contains:\n\n  - values for unit's generics,\n  - locally refered connections and operators,\n  - display specification,\n  - attributes overrides",
            "type": "object",
            "additionalProperties": false,
            "required": ["unit"],
            "properties": {
                "source":   {
                    "title": "Source",
                    "type":  "string",
                    "pattern": "^((/|\\$|((\\.\\.?/)(\\.\\./)*)|(https?://\\w([.-]?\\w)*((/(\\w(-?\\w)*/)*(\\w(-?\\w)*))?@/)?)|(git://\\w([.-]?\\w)*/(\\w(-?\\w)*/)*(\\w(-?\\w)*@/)(\\w(-?\\w)*/)*(\\w(-?\\w)*\\^)(\\$|/)))?([\\w.-]*[\\w-]/)*([\\w.-]*[\\w-])(#(/\\w([\\w.-]*\\w)*)+)?)|(#(/\\w([\\w.-]*\\w)*)+)$",
                    "description": "Path to external file with unit's instance specification.\nPath may be specified as:\n\n  - locally referenced path,\n  - absolute path (in respect to common base path),\n  - http reference,\n  - git reference (see docs for details).\n\nA part of file can be used if sepcified so (extra path after # (hash) sign, similar to JSON-Schema).\nLoaded data should be a dictionary.\nItems from loaded data would override items that were declared ABOVE (items that are not in loaded data would be kept).\nLoaded data can be altered then with declarations BELOW."
                },
                "merge":    {
                    "title": "Merge",
                    "type":  "array",
                    "items": {"$ref": "#/$defs/unitInst"},
                    "description": "List with unit's instance specifications, that would be merged with items, declaraed ABOVE:\n  - dictionaries are mixed recursively (existings items are replaced),\n  - lists are joined,\n  - scalars simply replaced,\n  - items with null/None value would delete existing items.\n\nSince specification allows 'source' - data for merge may be loaded from external file."
                },
                "virtual":  {
                    "title": "Virutal",
                    "const": "TODO: boolean after it's implemented",
                    "description": "Specification is used only for referencing from other places"
                },
                "unit": {
                    "oneOf": [
                        {
                            "title": "Symbolic Reference to Unit Specification",
                            "description": "Reference for Unit Specification lookup in external files.\n\nSpecified as:\n  - path (same rules as for 'source' field),\n  - just a filename without extension within angle braces (i.e. <>)",
                            "type": "string",
                            "pattern": "^((#(/\\w([\\w.-]*\\w)*)+))|(<\\w+>)|((/|\\$|((\\.\\.?/)(\\.\\./)*)|(https?://\\w([.-]?\\w)*((/(\\w(-?\\w)*/)*(\\w(-?\\w)*))?@/)?)|(git://\\w([.-]?\\w)*/(\\w(-?\\w)*/)*(\\w(-?\\w)*@/)(\\w(-?\\w)*/)*(\\w(-?\\w)*\\^)(\\$|/)))?([\\w.-]*[\\w-]/)*([\\w.-]*[\\w-])(#(/\\w([\\w.-]*\\w)*)+)?)$"
                        },
                        {"$ref": "#/$defs/unitSpec"}
                    ]
                },
                "name":     {"const": "TODO"},
                "generics": {"const": "TODO"},
                "nets":     {"const": "TODO"},
                "operators":{"const": "TODO"},
                "display":  {"const": "TODO"},
                "layers":   {"const": "TODO"},
                "all_the_attributes": {"const": "TODO"}
            }
        },

        "unitAttr": {
            "title": "Unit's Attributes Specification",
            "description": "Contains default values for unit's attributes",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "source":   {
                    "title": "Source",
                    "type": "string",
                    "pattern": "^((/|\\$|((\\.\\.?/)(\\.\\./)*)|(https?://\\w([.-]?\\w)*((/(\\w(-?\\w)*/)*(\\w(-?\\w)*))?@/)?)|(git://\\w([.-]?\\w)*/(\\w(-?\\w)*/)*(\\w(-?\\w)*@/)(\\w(-?\\w)*/)*(\\w(-?\\w)*\\^)(\\$|/)))?([\\w.-]*[\\w-]/)*([\\w.-]*[\\w-])(#(/\\w([\\w.-]*\\w)*)+)?)|(#(/\\w([\\w.-]*\\w)*)+)$",
                    "description": "Path to external file with attributes specification.\nPath may be specified as:\n\n  - locally referenced path,\n  - absolute path (in respect to common base path),\n  - http reference,\n  - git reference (see docs for details).\n\nA part of file can be used if sepcified so (extra path after # (hash) sign, similar to JSON-Schema).\nLoaded data should be a dictionary.\nItems from loaded data would override items that were declared ABOVE (items that are not in loaded data would be kept).\nLoaded data can be altered then with declarations BELOW."
                },
                "merge":    {
                    "title": "Merge",
                    "type":    "array",
                    "items": {"$ref": "#/$defs/unitAttr"},
                    "description": "List with attributes specifications, that would be merged with items, declaraed ABOVE:\n  - dictionaries are mixed recursively (existings items are replaced),\n  - lists are joined,\n  - scalars simply replaced,\n  - items with null/None value would delete existing items.\n\nSince specification allows 'source' - data for merge may be loaded from external file."
                },
                "virtual":  {
                    "title": "Virutal",
                    "const": "TODO: boolean after it's implemented",
                    "description": "Specification is used only for referencing from other places"
                },
                "type":             {"const": "TODO"},
                "d3hw_name":        {"const": "TODO"},
                "kind":             {"const": "TODO"},
                "color":            {"const": "TODO"},
                "highlight":        {"const": "TODO"},
                "text":             {"const": "TODO"},
                "class":            {"const": "TODO"},
                "style":            {"const": "TODO"},
                "props":            {"const": "TODO"},
                "hide":             {"const": "TODO"},
                "show":             {"const": "TODO"},
                "hideNC":           {"const": "TODO"}
            }
        },

        "ioSpec": {
            "title": "IO Pin Specification",
            "description": "IO display attributes",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "source":   {
                    "title": "Source",
                    "type": "string",
                    "pattern": "^((/|\\$|((\\.\\.?/)(\\.\\./)*)|(https?://\\w([.-]?\\w)*((/(\\w(-?\\w)*/)*(\\w(-?\\w)*))?@/)?)|(git://\\w([.-]?\\w)*/(\\w(-?\\w)*/)*(\\w(-?\\w)*@/)(\\w(-?\\w)*/)*(\\w(-?\\w)*\\^)(\\$|/)))?([\\w.-]*[\\w-]/)*([\\w.-]*[\\w-])(#(/\\w([\\w.-]*\\w)*)+)?)|(#(/\\w([\\w.-]*\\w)*)+)$",
                    "description": "Path to external file with IO specification.\nPath may be specified as:\n\n  - locally referenced path,\n  - absolute path (in respect to common base path),\n  - http reference,\n  - git reference (see docs for details).\n\nA part of file can be used if sepcified so (extra path after # (hash) sign, similar to JSON-Schema).\nLoaded data should be a dictionary.\nItems from loaded data would override items that were declared ABOVE (items that are not in loaded data would be kept).\nLoaded data can be altered then with declarations BELOW."
                },
                "merge":    {
                    "title": "Merge",
                    "type":    "array",
                    "items": {"$ref": "#/$defs/ioSpec"},
                    "description": "List with IO specifications, that would be merged with items, declaraed ABOVE:\n  - dictionaries are mixed recursively (existings items are replaced),\n  - lists are joined,\n  - scalars simply replaced,\n  - items with null/None value would delete existing items.\n\nSince specification allows 'source' - data for merge may be loaded from external file."
                },
                "virtual":  {
                    "title": "Virutal",
                    "const": "TODO: boolean after it's implemented",
                    "description": "Specification is used only for referencing from other places"
                },
                "name":     {"const":"TODO"},
                "dir":      {"enum": ["in", "out"]},
                "side":     {"enum": ["north", "south", "west", "east"]},
                "color":    {"const": "TODO"},
                "highlight":{"const": "TODO"},
                "type":     {"const": "TODO"},
                "bus":      {"const": "TODO"},
                "clk":      {"type": "boolean"},
                "gate":     {"type": "boolean"},
                "inv":      {"type": "boolean"},
                "hide":     {"const": "TODO"},
                "show":     {"const": "TODO"},
                "autohide": {"const": "TODO"},
                "order":    {"const": "TODO"},
                "class":    {"const": "TODO"},
                "style":    {"const": "TODO"},
                "connectedAsParrent": {"const": "TODO"},
                "layers":   {"const": "TODO"},
                "children": {"$ref": "#/$defs/ioDict"}
            }
        },

        "ioDict": {
            "title": "IO subgroup",
            "description": "Used when multiple IO's are grouped into single IO group. Dictionary with specifications for each IO of a group.\nKey is IO reference sub name. Subname would be joined with group's name via '.' (dot) and joined name would be used in nets, operators and other references.\nValue should be an IO specification.",
            "type": "object",
            "additionalProperties": false,
            "patternProperties": {
                "^\\w+$": {"$ref": "#/$defs/ioSpec"}
            }
        },

        "netSpec": {
            "title": "Net Specification",
            "description": "Net endpoints, display attributes",
            "type": "object",
            "additionalProperties": false,
            "required": ["src", "dst"],
            "properties": {
                "source":   {
                    "title": "Source",
                    "type": "string",
                    "pattern": "^((/|\\$|((\\.\\.?/)(\\.\\./)*)|(https?://\\w([.-]?\\w)*((/(\\w(-?\\w)*/)*(\\w(-?\\w)*))?@/)?)|(git://\\w([.-]?\\w)*/(\\w(-?\\w)*/)*(\\w(-?\\w)*@/)(\\w(-?\\w)*/)*(\\w(-?\\w)*\\^)(\\$|/)))?([\\w.-]*[\\w-]/)*([\\w.-]*[\\w-])(#(/\\w([\\w.-]*\\w)*)+)?)|(#(/\\w([\\w.-]*\\w)*)+)$",
                    "description": "Path to external file with net specification.\nPath may be specified as:\n\n  - locally referenced path,\n  - absolute path (in respect to common base path),\n  - http reference,\n  - git reference (see docs for details).\n\nA part of file can be used if sepcified so (extra path after # (hash) sign, similar to JSON-Schema).\nLoaded data should be a dictionary.\nItems from loaded data would override items that were declared ABOVE (items that are not in loaded data would be kept).\nLoaded data can be altered then with declarations BELOW."
                },
                "merge":    {
                    "title": "Merge",
                    "type":    "array",
                    "items": {"$ref": "#/$defs/netSpec"},
                    "description": "List with net specifications, that would be merged with items, declaraed ABOVE:\n  - dictionaries are mixed recursively (existings items are replaced),\n  - lists are joined,\n  - scalars simply replaced,\n  - items with null/None value would delete existing items.\n\nSince specification allows 'source' - data for merge may be loaded from external file."
                },
                "virtual":  {
                    "title": "Virutal",
                    "const": "TODO: boolean after it's implemented",
                    "description": "Specification is used only for referencing from other places"
                },
                "src":      {"const":   "TODO"},
                "dst":      {"const":   "TODO"},
                "srcr":     {"const":   "TODO"},
                "dstr":     {"const":   "TODO"},
                "name":     {"const":   "TODO"},
                "text":     {"const":   "TODO"},
                "bus":      {"const":   "TODO"},
                "color":    {"const":   "TODO"},
                "highlight":{"const":   "TODO"},
                "reverse":  {"const":   "TODO"},
                "hide":     {"const":   "TODO"},
                "show":     {"const":   "TODO"},
                "class":    {"const":   "TODO"},
                "style":    {"const":   "TODO"},
                "layers":   {"const":   "TODO"}
            }
        }
    }
}
