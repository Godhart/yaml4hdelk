<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="<%= require('./icon.svg') %>" />
  <title>Monaco YAML4SCHM Editor Frame</title>
  <meta name="description" content="Monaco editor with support of YAML4SCHM" />
  <meta name="theme-color" content="#42e3ff" />
  <style>
    /* Tabs */

    .tabs {
      display: inline-block;
      width: 100%;
      border-bottom: 1px solid #DAE0E7;
      /*background: #F9F9F9;*/
      list-style-type: none;
      padding: 12px 12px 0;
    }

    a {
      text-decoration: none;
      color: #EEE;
    }

    .tab {
      float: left;
      height: 44px;
      margin: 0 8px -1px 0;
      border: 1px solid #AAA;
      /*background: #F9F9F9;*/
      border-radius: 8px 8px 0 0;
      overflow: hidden;
    }

    .tab,
    .tab a {
      transition: all .25s;
    }

    .tab a {
      display: inline-block;
    }

    .tab a:first-child {
      padding: 12px 2px 12px 16px;
      white-space: nowrap;
    }

    .tab.tabClosed,
    .tab.tabClosed a:first-child {
      margin-right: 0;
      border-width: 0;
    }

    .tab.tabClosed {
      width: 0 !important;
      /* use important because we need to set the width of tabs in javascript in order to be able to animate them to 0 */
    }

    .tab.tabClosed a {
      opacity: 0;
    }

    .tab:hover {
      background: #444;
    }

    .tabSelected {
      height: 45px;
      border-bottom: none;
      background: #444;
    }

    .closeTab {
      width: 16px;
      height: 16px;
      margin: 0 14px 0 12px;
      padding: 3px;
      border-radius: 16px;
      line-height: 16px;
      text-align: center;
    }

    .closeTab:hover {
      background: #db3636;
    }
  </style>
</head>

<body>
  <!--
    <nav>
      <h1>Monaco YAML4SCHM</h1>
      <a
        href="https://npmjs.com/package/monaco-yaml"
        class="nav-icon"
        title="View monaco-yaml on npm"
      >
        <img
          alt="npm icon"
          height="32"
          src="<%= require('@fortawesome/fontawesome-free/svgs/brands/npm.svg') %>"
          width="32"
        />
      </a>
      <a
        href="https://github.com/remcohaszing/monaco-yaml"
        class="nav-icon"
        title="View monaco-yaml on GitHub"
      >
        <img
          alt="GitHub icon"
          height="32"
          src="<%= require('@fortawesome/fontawesome-free/svgs/brands/github.svg') %>"
          width="32"
        />
      </a>
    </nav>
    -->
  <main>
    <ul class="tabs">
      <li class="tab tabSelected"><a href="#">Some Real Big Thing</a><a class="closeTab" href="">✕</a>
      </li>
      <li class="tab selected"><a href="#">Some Thing 2</a><a class="closeTab" href="">✕</a></li>
      <li class="tab selected"><a href="#">Some Thing 3</a><a class="closeTab" href="">✕</a></li>
      <li class="tab selected"><a href="#">Some Thing 4</a><a class="closeTab" href="">✕</a></li>
    </ul>
    <select id="schema-selection">
      <option value="schm.yaml">YAML4SCHM</option>
    </select>
    <div id="breadcrumbs"></div>
    <div id="editor"></div>
    <div id="problems"></div>
  </main>
  <script>
    const callbackHandler = function (callback, retArgs) {
      if (!Array.isArray(retArgs)) {
        retArgs = [retArgs]
      }
      event.source.postMessage({
        'func': callback.func,
        'obj': callback.obj,
        'method': callback.method,
        'args': retArgs,
        'callback': undefined,
      }, callback.origin);
    }

    window.addEventListener('message', (event) => {
      console.log("Editor received message: " + JSON.stringify(event), "\n origin - " + JSON.stringify(event.origin), "\n data   - " + JSON.stringify(event.data));

      /* TODO: if (event.origin !== my_domain) {
        return null;
      } */
      if (event.data.func === 'call') {
        if (event.data.obj === undefined) {
          return null;
        }
        if (event.data.method === undefined) {
          return null;
        }
        if (event.data.args === undefined) {
          return null;
        }
        if (event.data.obj !== undefined) {
          let obj = null;
          if (event.data.obj === 'worker') {
            obj = document.worker;
          } else if (event.data.obj === 'settings') {
            obj = document.settings;
          }
          if (obj == null) {
            return null;
          }
          if (obj[event.data.method] !== undefined) {
            let result = obj[event.data.method](...event.data.args);
            if (event.data.callback !== undefined) {
              if (result instanceof Promise) {
                result.then(retArgs => callbackHandler(event.data.callback, retArgs))
              } else {
                callbackHandler(event.data.callback, result)
              }
            }
          }
        } else {
          return null;
        }
      }
    });

    document.addEventListener('DOMContentLoaded', function () {
      if (window.parent === undefined || window.parent == null) {
        return null;
      }
      console.log("Editor frame loaded");
      window.parent.postMessage({
        'func': 'call',
        'obj': 'controller',
        'method': 'onEditorCreated',
        'args': [],
        'callback': undefined
      }, '*')
    });

  </script>
  <script>
    // explosion animation adapted from https://codepen.io/nicksheffield

    var close = document.getElementsByClassName('closeTab');
    var tabs = document.getElementsByClassName('tab');
    var anchors = document.querySelectorAll('a');
    var getExplosionColor = function () {
      //var _color = 'rgb(' + [r(0,255), r(0,255), r(0,255)].join(',') + ')'; // multi color
      var _color = '#bbbbbb'; // dust
      return _color;
    };

    Array.prototype.forEach.call(close, function (close) {
      close.addEventListener('click', explode)
    });

    Array.prototype.forEach.call(tabs, function (tab) {
      tab.style.width = tab.offsetWidth + 'px';
    });

    Array.prototype.forEach.call(anchors, function (anchor) {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        return false;
      })
    })

    function getOffset(el) {
      var rect = el.getBoundingClientRect(),
        scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
        scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      return { top: rect.top + scrollTop, left: rect.left + scrollLeft }
    }

    function explode(e) {
      var targetTab = e.currentTarget.parentElement;
      var tabOffsets = getOffset(targetTab);
      var x = tabOffsets.left;
      var y = tabOffsets.top + 10;
      var c = document.createElement('canvas');
      var ctx = c.getContext('2d');
      var ratio = window.devicePixelRatio;
      var particles = [];

      targetTab.classList.add("tabClosed");

      window.setTimeout(function () {
        document.body.appendChild(c)

        /*c.style.position = 'absolute'
        c.style.left = (x - 100) + 'px'
        c.style.top = (y - 100) + 'px'
        c.style.pointerEvents = 'none'
        c.style.width = 200 + 'px'
        c.style.height = 200 + 'px'
        c.width = 200 * ratio
        c.height = 200 * ratio*/


        c.style.position = 'absolute'
        c.style.left = (x - 40) + 'px'
        c.style.top = (y - 150) + 'px'
        c.style.pointerEvents = 'none'
        c.style.width = 80 + 'px'
        c.style.height = 300 + 'px'
        c.width = 80 * ratio
        c.height = 300 * ratio

        function Particle() {
          return {
            x: c.width / 2,
            y: c.height / 2,
            radius: r(20, 30),
            color: getExplosionColor(),
            rotation: r(0, 360, true),
            speed: r(8, 12),
            friction: 0.9,
            opacity: r(0, 0.5, true),
            yVel: 0,
            gravity: 0.1
          }
        }

        for (var i = 0; ++i < 25;) {
          particles.push(Particle())
        }

        function render() {
          ctx.clearRect(0, 0, c.width, c.height)

          particles.forEach(function (p, i) {

            angleTools.moveOnAngle(p, p.speed)

            p.opacity -= 0.01
            p.speed *= p.friction
            p.radius *= p.friction

            p.yVel += p.gravity
            p.y += p.yVel

            if (p.opacity < 0) return
            if (p.radius < 0) return

            ctx.beginPath()
            ctx.globalAlpha = p.opacity
            ctx.fillStyle = p.color
            ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, false)
            ctx.fill()
          })
        }

        ; (function renderLoop() {
          requestAnimationFrame(renderLoop)
          render()
        })();

        setTimeout(function () {
          document.body.removeChild(c)
        }, 3000);
      }, 150);
    }

    var angleTools = { getAngle: function (t, n) { var a = n.x - t.x, e = n.y - t.y; return Math.atan2(e, a) / Math.PI * 180 }, getDistance: function (t, n) { var a = t.x - n.x, e = t.y - n.y; return Math.sqrt(a * a + e * e) }, moveOnAngle: function (t, n) { var a = this.getOneFrameDistance(t, n); t.x += a.x, t.y += a.y }, getOneFrameDistance: function (t, n) { return { x: n * Math.cos(t.rotation * Math.PI / 180), y: n * Math.sin(t.rotation * Math.PI / 180) } } };
    function r(a, b, c) { return parseFloat((Math.random() * ((a ? a : 1) - (b ? b : 0)) + (b ? b : 0)).toFixed(c ? c : 0)); }
  </script>
</body>

</html>
